{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nclass DeltaAPI {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.axios = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000\n    });\n  }\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  async healthCheck() {\n    const response = await this.axios.get('/health');\n    return response.data;\n  }\n  async getDatabaseStats() {\n    const response = await this.axios.get('/database/stats');\n    return response.data;\n  }\n  async proposeCharacter(excludeChars = []) {\n    const params = {\n      session: this.sessionId\n    };\n    if (excludeChars.length > 0) {\n      params.exclude = excludeChars.join(',');\n    }\n    const response = await this.axios.get('/propose', {\n      params\n    });\n    return response.data;\n  }\n  async addFilter(characterNumber, value) {\n    const response = await this.axios.post('/filter', {\n      session: this.sessionId,\n      character_number: characterNumber,\n      value: value\n    });\n    return response.data;\n  }\n  async getState() {\n    const response = await this.axios.get('/state', {\n      params: {\n        session: this.sessionId\n      }\n    });\n    return response.data;\n  }\n  async resetState() {\n    const response = await this.axios.delete('/state', {\n      params: {\n        session: this.sessionId\n      }\n    });\n    return response.data;\n  }\n  async undoLastFilter() {\n    const response = await this.axios.post('/undo', {\n      session: this.sessionId\n    });\n    return response.data;\n  }\n  async getCharacterValues(characterNumber) {\n    const response = await this.axios.get(`/character/${characterNumber}/values`, {\n      params: {\n        session: this.sessionId\n      }\n    });\n    return response.data;\n  }\n  async getCharacterInfo(characterNumber) {\n    const response = await this.axios.get(`/character/${characterNumber}/info`);\n    return response.data;\n  }\n  async getItems() {\n    const response = await this.axios.get('/items', {\n      params: {\n        session: this.sessionId\n      }\n    });\n    return response.data;\n  }\n  async runAutoWorkflow(maxSteps = 10) {\n    const response = await this.axios.post('/workflow/auto', {\n      session: this.sessionId,\n      max_steps: maxSteps\n    });\n    return response.data;\n  }\n\n  // Helper method to clean up formatting\n  cleanDescription(description) {\n    if (typeof description !== 'string') return description;\n    return description.replace(/\\\\i\\{\\}/g, '') // Remove italic start\n    .replace(/\\\\i0\\{\\}/g, '') // Remove italic end\n    .replace(/\\\\b\\{\\}/g, '') // Remove bold start\n    .replace(/\\\\b0\\{\\}/g, '') // Remove bold end\n    .replace(/<</g, '(') // Replace << with (\n    .replace(/>>/g, ')') // Replace >> with )\n    .replace(/</g, '') // Remove < \n    .replace(/>/g, '') // Remove >\n    .trim();\n  }\n}\nexport default DeltaAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","DeltaAPI","constructor","sessionId","generateSessionId","create","baseURL","timeout","Date","now","Math","random","toString","substr","healthCheck","response","get","data","getDatabaseStats","proposeCharacter","excludeChars","params","session","length","exclude","join","addFilter","characterNumber","value","post","character_number","getState","resetState","delete","undoLastFilter","getCharacterValues","getCharacterInfo","getItems","runAutoWorkflow","maxSteps","max_steps","cleanDescription","description","replace","trim"],"sources":["/Users/tomwilson/source/delta2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nclass DeltaAPI {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.axios = axios.create({\n      baseURL: API_BASE_URL,\n      timeout: 10000,\n    });\n  }\n\n  generateSessionId() {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  async healthCheck() {\n    const response = await this.axios.get('/health');\n    return response.data;\n  }\n\n  async getDatabaseStats() {\n    const response = await this.axios.get('/database/stats');\n    return response.data;\n  }\n\n  async proposeCharacter(excludeChars = []) {\n    const params = { session: this.sessionId };\n    if (excludeChars.length > 0) {\n      params.exclude = excludeChars.join(',');\n    }\n    \n    const response = await this.axios.get('/propose', { params });\n    return response.data;\n  }\n\n  async addFilter(characterNumber, value) {\n    const response = await this.axios.post('/filter', {\n      session: this.sessionId,\n      character_number: characterNumber,\n      value: value\n    });\n    return response.data;\n  }\n\n  async getState() {\n    const response = await this.axios.get('/state', {\n      params: { session: this.sessionId }\n    });\n    return response.data;\n  }\n\n  async resetState() {\n    const response = await this.axios.delete('/state', {\n      params: { session: this.sessionId }\n    });\n    return response.data;\n  }\n\n  async undoLastFilter() {\n    const response = await this.axios.post('/undo', {\n      session: this.sessionId\n    });\n    return response.data;\n  }\n\n  async getCharacterValues(characterNumber) {\n    const response = await this.axios.get(`/character/${characterNumber}/values`, {\n      params: { session: this.sessionId }\n    });\n    return response.data;\n  }\n\n  async getCharacterInfo(characterNumber) {\n    const response = await this.axios.get(`/character/${characterNumber}/info`);\n    return response.data;\n  }\n\n  async getItems() {\n    const response = await this.axios.get('/items', {\n      params: { session: this.sessionId }\n    });\n    return response.data;\n  }\n\n  async runAutoWorkflow(maxSteps = 10) {\n    const response = await this.axios.post('/workflow/auto', {\n      session: this.sessionId,\n      max_steps: maxSteps\n    });\n    return response.data;\n  }\n\n  // Helper method to clean up formatting\n  cleanDescription(description) {\n    if (typeof description !== 'string') return description;\n    \n    return description\n      .replace(/\\\\i\\{\\}/g, '')  // Remove italic start\n      .replace(/\\\\i0\\{\\}/g, '') // Remove italic end\n      .replace(/\\\\b\\{\\}/g, '')  // Remove bold start\n      .replace(/\\\\b0\\{\\}/g, '') // Remove bold end\n      .replace(/<</g, '(')      // Replace << with (\n      .replace(/>>/g, ')')      // Replace >> with )\n      .replace(/</g, '')        // Remove < \n      .replace(/>/g, '')        // Remove >\n      .trim();\n  }\n}\n\nexport default DeltaAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}